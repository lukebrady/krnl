#!/usr/bin/python3

import argparse, sys, webbrowser

from krnl import kernel_server, download_kernel, list_kernel, remove_kernel

from krnl.build_environment import BuildEnvironment
from krnl.destroy_environment import DestroyEnvironment



class KrnlCommand:
    def __init__(self):
        parser = argparse.ArgumentParser(
            description='A distributed kernel management system',
            usage='''krnl <command> [<args>]

        The most commonly used krnl commands are:
           build   Builds the krnl environment
           pull    Pulls a kernel based on its version
           list    Lists all pulled kernels
           rm      Removes the given kernel
        ''')
        parser.add_argument('command', help='Subcommand to run')
        # parse_args defaults to [1:] for args, but you need to
        # exclude the rest of the args too, or validation will fail
        args = parser.parse_args(sys.argv[1:2])
        if not hasattr(self, args.command):
            print('Unrecognized command')
            parser.print_help()
            exit(1)
        # use dispatch pattern to invoke method with same name
        getattr(self, args.command)()

    def build(self):
        parser = argparse.ArgumentParser(
            description='Builds krnl environment')
        # args = parser.parse_args(sys.argv[2:])
        build_env = BuildEnvironment()
        build_env.deploy_redis()
        print('INFO: Building krnl environment')

    def destroy(self):
        parser = argparse.ArgumentParser(
            description='Builds krnl environment')
        # args = parser.parse_args(sys.argv[2:])
        build_env = DestroyEnvironment()
        build_env.destroy_redis()
        print('INFO: Destroying krnl environment')

    def pull(self):
        parser = argparse.ArgumentParser(
            description='Pulls a kernel'
        )
        # NOT prefixing the argument with -- means it's not optional
        parser.add_argument('-t', help='Kernel version that will be pulled')
        args = parser.parse_args(sys.argv[2:])

        if args.t:
            download_kernel.download_kernel(args.t)
        else:
            parser.print_help()

    def list(self):
        argparse.ArgumentParser(
            description='Lists all pulled kernels'
        )
        # Run the list_kernel function
        list_kernel.list_kernel()

    def rm(self):
        parser = argparse.ArgumentParser(
            description='Removes a kernel based on its version'
        )

        parser.add_argument('-t', help='Version of kernel that will be removed')
        args = parser.parse_args(sys.argv[2:])

        if args.t:
            remove_kernel.remove_kernel(args.t)
        else:
            parser.print_help()

    def server(self):
        parser = argparse.ArgumentParser(
            description='Starts the krnl web server'
        )

        server = kernel_server.KernelServer()
        webbrowser.open('localhost:5000')
        server.app.run(debug=True)

    def deploy(self):
        parser = argparse.ArgumentParser(
            description='Deploys a kernel to a list of nodes'
        )

        parser.add_argument('-t', help='Version of kernel that will be deployed')
        parser.add_argument('-n', help='The list of nodes that the kernel will be deployed to')
        args = parser.parse_args(sys.argv[2:])

        if args.t:
            print(args.t)
        if args.n:
            KernelSalt().deploy_kernel()
        else:
            parser.print_help()
def command_message():
    print('Usage: krnl COMMAND\n')
    print('A distributed kernel management system\n')
    print('Options:')
    print('build    Builds krnl environment')
    print('pull    Pulls a kernel')
    print('list    Lists all pulled kernels\n')
    print("Run 'krnl COMMAND -h' for more information on a command.")
    exit(code=1)


if __name__ == '__main__':
    KrnlCommand()
